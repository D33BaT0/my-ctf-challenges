from utils import *
from tqdm import tqdm

F.<x> = PolynomialRing(ZZ)
r = 2232123796482243553563388394642252242447624758532104909445052499370196473
e2o = 31278604127290247578271715456389580024504536762091689653084108630682523156753735534001088645984992476850153398971689257644109185492284665270104815648968278421418869650567421204328618291858399879149578979851216693594335362
assert e2o % r == 0
c = n//r 

F1 = GF(p) 
E1 = EllipticCurve(F1,[A,0]) 

F2.<u> = GF(p^2)

f = open("./output.txt",'r')
datas = eval(f.readlines()[1])
f.close() 

k = 8
K.<a> = GF(p^k)
PR.<tt> = PolynomialRing(K)
uk = K(str(F2.modulus().change_ring(ZZ)(tt).roots(multiplicities=False)[0]))
Ek = EllipticCurve(K,[A,0])

def E2_to_Ek(P):
    x,y = P.xy()
    x = x.polynomial().change_ring(ZZ)(uk)
    y = y.polynomial().change_ring(ZZ)(uk)
    return x,y

ksss = ['?', '?', '?', '?', '?', '?', '?', 1, 1, 0, '?', '?', 1, '?', '?', '?', '?', '?', '?', '?', 0, 0, 1, '?', 1, '?', 0, 0, 1, 1, '?', '?', '?', 1, '?', 0, '?', '?', 1, '?', 0, '?', 1, '?', '?', '?', '?', '?', '?', 0, '?', '?', '?', '?', '?', 1, '?', 1, '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', 0, 0, '?', '?', '?', '?', '?', 0, 0, 1, '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', 0, 1, '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', 0, 0, '?', 1, '?', 0, '?', '?', '?', 0, '?', '?', '?', '?', 1, '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', 1, 1, '?', 0, '?', '?', 1, 0, '?', '?', 1, '?', '?', '?', 0, 0, 0, 0, 0, '?', '?', 1, 0, '?', 1, 1, '?', 1, '?', '?', '?', '?', '?', 1, 1, '?', 0, '?', 1, '?', '?', '?', 1, '?', 0, '?', '?', '?', '?', '?', '?', '?', '?', 0, 0, '?', '?', '?', 1, 1, 0, '?', '?', '?', 1, '?', '?', '?', '?', 1, '?', '?', '?', '?', '?', '?', '?', '?', 0, 1, '?', '?', '?', 1, '?', '?', 0, 0, '?', '?', 1, 1, '?', 1, '?', 1, '?', '?', '?', '?', '?', '?', 1, '?', '?', 0, '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', 1, '?', '?', '?', '?', '?', '?', '?', '?', '?', 0, 0, '?', '?', 1, '?', '?', '?', 0, 1, '?', '?', '?', '?', '?', '?', 1, 0, '?', '?', 0, '?', 1, '?', 0, '?', '?', '?', '?', '?', 1, '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', 0, '?', '?', 1, '?', '?', '?', '?', '?', '?', 1, '?', '?', '?', '?', '?', 0, '?', 0, 1, '?', 0, '?', 1, '?', '?', 1, 0, '?', '?', '?', '?', '?', '?', '?', '?', '?', 0, '?', '?', '?', 0, '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', 1, '?', '?', 0, '?', '?', '?', '?', '?', 0, '?', '?', '?', '?', '?', 1, 0, '?', '?', '?', '?', '?', 1, '?', '?', '?', 1, '?', '?', '?', '?', 1, '?', 0, '?', 1, 1, 0, '?', '?', '?', 0, '?', '?', '?', '?', '?', 0, '?', '?', '?', '?', '?', '?', '?', '?', 0, '?', '?', '?', 1, '?', '?', 0, '?', '?', '?', '?', '?', 0, '?', '?', '?', '?', 1, '?', 1, '?', '?', 1, '?', '?', 1, '?', '?', '?', 0, 0, 1, '?', '?', 1, '?', '?', 1, 1, 0, '?', '?', '?', '?', '?', '?', 0, '?', '?', '?', 0, '?', '?', '?', '?', '?', '?', 0, '?', '?', '?', 1, '?', '?', '?', '?', '?', '?', '?', '?', 1, '?', '?', '?', '?', 0, '?', 0, '?', 1, 0, '?', '?', '?', 1, '?', 1, '?', '?', '?', 1, '?', 0, '?', '?', '?', '?', '?', '?', 1, '?', '?', 1, '?', '?', 0, '?', '?', '?', '?', 1, 0, '?', '?', '?', '?', 0, '?', '?', '?', '?', 1, '?', 0, 0, '?', '?', '?', '?', '?', 1, '?', '?', '?', '?', 0, 1, 1, '?', '?', '?', 0, '?', '?', 0, '?', '?', 0, '?', '?', '?', '?', '?', '?', 0]

for tmp in tqdm(datas[len(ksss):len(ksss)+50]):
    _,xP,_,zP,Q,yQ = tmp  
    tA = F2((Q[1]**2-Q[0]**3)/Q[0])
    E2 = EllipticCurve(F2,[tA,0]) 
    
    xP = E1(xP)
    zP = E1(zP)

    Q =  E2( Q)
    
    if Q * e2o != 0 :
        ksss.append("?")
        continue   

    axP = c * Ek(xP) 
    azP = c * Ek(zP)  

    yQ = E2(yQ)

    x1,y1 = E2_to_Ek( Q) 

    aa = (y1^2-x1^3)/x1
    Ek2 = EllipticCurve(K,[aa,0])
    phi = Ek2.isomorphism_to(Ek)

    x2,y2 = E2_to_Ek(yQ)
    
    hQ = phi(Ek2(x1,y1)) 
    yhQ= phi(Ek2(x2,y2)) 
    
    AAAAA = (axP).tate_pairing(yhQ, r, 8)
    BBBBB = (azP).tate_pairing( hQ, r, 8)

    if AAAAA == 1:
        print("BAD")
        ksss.append("?")
        continue

    if AAAAA == BBBBB:
        ksss.append(1)
    else: 
        ksss.append(0)

print(ksss)


m=100

twsit_state = [ 76, 5, 29, 61, 62, 54, 66, 69, 81, 48,
                            20, 64, 14, 77, 50, 79, 71, 40, 93, 58, 
                            59, 19, 31, 63,  2, 96, 35, 18, 85, 56,
                            21, 33,  7, 99, 17, 38, 97, 89, 74, 32, 
                            27, 42,  3, 82, 91, 41, 86,  9, 13, 30, 
                            11, 87,  1, 88, 26, 67, 25, 75, 94, 45, 
                            68, 39, 55, 16, 28, 57, 49, 37, 52, 22, 
                            70, 36,  0,  8, 65, 72, 43, 12, 23, 53,
                            51, 60,  4, 46, 83, 90, 84, 92, 24, 15,
                            80, 98, 34, 78, 95, 44, 73, 10,  6, 47]

real_hidden = ["?" for _ in range(m)]

def recover_data(old_station,ktmp):
    global real_hidden
    new_station = [int(old_station[twsit_state[i]]) for i in range(m)]

    for _ in range(len(ktmp)):
        if ktmp[_] == "?": continue
        if real_hidden[new_station[_]] != "?" and real_hidden[new_station[_]] != ktmp[_]:
            print("bug?")
        real_hidden[new_station[_]] = ktmp[_]
    return new_station

old_station = [i for i in range(m)]
for _ in range(6):
    old_station = recover_data(old_station,ksss[_*100:_*100+100])

print(real_hidden.count("?"))
print(real_hidden)

